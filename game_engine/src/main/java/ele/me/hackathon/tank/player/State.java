/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ele.me.hackathon.tank.player;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-08")
public class State implements org.apache.thrift.TBase<State, State._Fields>, java.io.Serializable, Cloneable, Comparable<State> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("State");

  private static final org.apache.thrift.protocol.TField TANKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tanks", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SHELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("shells", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField YOUR_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("yourFlags", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ENEMY_FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("enemyFlags", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StateTupleSchemeFactory();

  public java.util.List<Tank> tanks; // required
  public java.util.List<Shell> shells; // required
  public int yourFlags; // required
  public int enemyFlags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TANKS((short)1, "tanks"),
    SHELLS((short)2, "shells"),
    YOUR_FLAGS((short)3, "yourFlags"),
    ENEMY_FLAGS((short)4, "enemyFlags");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TANKS
          return TANKS;
        case 2: // SHELLS
          return SHELLS;
        case 3: // YOUR_FLAGS
          return YOUR_FLAGS;
        case 4: // ENEMY_FLAGS
          return ENEMY_FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YOURFLAGS_ISSET_ID = 0;
  private static final int __ENEMYFLAGS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TANKS, new org.apache.thrift.meta_data.FieldMetaData("tanks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tank.class))));
    tmpMap.put(_Fields.SHELLS, new org.apache.thrift.meta_data.FieldMetaData("shells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Shell.class))));
    tmpMap.put(_Fields.YOUR_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("yourFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENEMY_FLAGS, new org.apache.thrift.meta_data.FieldMetaData("enemyFlags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(State.class, metaDataMap);
  }

  public State() {
  }

  public State(
    java.util.List<Tank> tanks,
    java.util.List<Shell> shells,
    int yourFlags,
    int enemyFlags)
  {
    this();
    this.tanks = tanks;
    this.shells = shells;
    this.yourFlags = yourFlags;
    setYourFlagsIsSet(true);
    this.enemyFlags = enemyFlags;
    setEnemyFlagsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public State(State other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTanks()) {
      java.util.List<Tank> __this__tanks = new java.util.ArrayList<Tank>(other.tanks.size());
      for (Tank other_element : other.tanks) {
        __this__tanks.add(new Tank(other_element));
      }
      this.tanks = __this__tanks;
    }
    if (other.isSetShells()) {
      java.util.List<Shell> __this__shells = new java.util.ArrayList<Shell>(other.shells.size());
      for (Shell other_element : other.shells) {
        __this__shells.add(new Shell(other_element));
      }
      this.shells = __this__shells;
    }
    this.yourFlags = other.yourFlags;
    this.enemyFlags = other.enemyFlags;
  }

  public State deepCopy() {
    return new State(this);
  }

  @Override
  public void clear() {
    this.tanks = null;
    this.shells = null;
    setYourFlagsIsSet(false);
    this.yourFlags = 0;
    setEnemyFlagsIsSet(false);
    this.enemyFlags = 0;
  }

  public int getTanksSize() {
    return (this.tanks == null) ? 0 : this.tanks.size();
  }

  public java.util.Iterator<Tank> getTanksIterator() {
    return (this.tanks == null) ? null : this.tanks.iterator();
  }

  public void addToTanks(Tank elem) {
    if (this.tanks == null) {
      this.tanks = new java.util.ArrayList<Tank>();
    }
    this.tanks.add(elem);
  }

  public java.util.List<Tank> getTanks() {
    return this.tanks;
  }

  public State setTanks(java.util.List<Tank> tanks) {
    this.tanks = tanks;
    return this;
  }

  public void unsetTanks() {
    this.tanks = null;
  }

  /** Returns true if field tanks is set (has been assigned a value) and false otherwise */
  public boolean isSetTanks() {
    return this.tanks != null;
  }

  public void setTanksIsSet(boolean value) {
    if (!value) {
      this.tanks = null;
    }
  }

  public int getShellsSize() {
    return (this.shells == null) ? 0 : this.shells.size();
  }

  public java.util.Iterator<Shell> getShellsIterator() {
    return (this.shells == null) ? null : this.shells.iterator();
  }

  public void addToShells(Shell elem) {
    if (this.shells == null) {
      this.shells = new java.util.ArrayList<Shell>();
    }
    this.shells.add(elem);
  }

  public java.util.List<Shell> getShells() {
    return this.shells;
  }

  public State setShells(java.util.List<Shell> shells) {
    this.shells = shells;
    return this;
  }

  public void unsetShells() {
    this.shells = null;
  }

  /** Returns true if field shells is set (has been assigned a value) and false otherwise */
  public boolean isSetShells() {
    return this.shells != null;
  }

  public void setShellsIsSet(boolean value) {
    if (!value) {
      this.shells = null;
    }
  }

  public int getYourFlags() {
    return this.yourFlags;
  }

  public State setYourFlags(int yourFlags) {
    this.yourFlags = yourFlags;
    setYourFlagsIsSet(true);
    return this;
  }

  public void unsetYourFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YOURFLAGS_ISSET_ID);
  }

  /** Returns true if field yourFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetYourFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YOURFLAGS_ISSET_ID);
  }

  public void setYourFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YOURFLAGS_ISSET_ID, value);
  }

  public int getEnemyFlags() {
    return this.enemyFlags;
  }

  public State setEnemyFlags(int enemyFlags) {
    this.enemyFlags = enemyFlags;
    setEnemyFlagsIsSet(true);
    return this;
  }

  public void unsetEnemyFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENEMYFLAGS_ISSET_ID);
  }

  /** Returns true if field enemyFlags is set (has been assigned a value) and false otherwise */
  public boolean isSetEnemyFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENEMYFLAGS_ISSET_ID);
  }

  public void setEnemyFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENEMYFLAGS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TANKS:
      if (value == null) {
        unsetTanks();
      } else {
        setTanks((java.util.List<Tank>)value);
      }
      break;

    case SHELLS:
      if (value == null) {
        unsetShells();
      } else {
        setShells((java.util.List<Shell>)value);
      }
      break;

    case YOUR_FLAGS:
      if (value == null) {
        unsetYourFlags();
      } else {
        setYourFlags((java.lang.Integer)value);
      }
      break;

    case ENEMY_FLAGS:
      if (value == null) {
        unsetEnemyFlags();
      } else {
        setEnemyFlags((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TANKS:
      return getTanks();

    case SHELLS:
      return getShells();

    case YOUR_FLAGS:
      return getYourFlags();

    case ENEMY_FLAGS:
      return getEnemyFlags();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TANKS:
      return isSetTanks();
    case SHELLS:
      return isSetShells();
    case YOUR_FLAGS:
      return isSetYourFlags();
    case ENEMY_FLAGS:
      return isSetEnemyFlags();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof State)
      return this.equals((State)that);
    return false;
  }

  public boolean equals(State that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tanks = true && this.isSetTanks();
    boolean that_present_tanks = true && that.isSetTanks();
    if (this_present_tanks || that_present_tanks) {
      if (!(this_present_tanks && that_present_tanks))
        return false;
      if (!this.tanks.equals(that.tanks))
        return false;
    }

    boolean this_present_shells = true && this.isSetShells();
    boolean that_present_shells = true && that.isSetShells();
    if (this_present_shells || that_present_shells) {
      if (!(this_present_shells && that_present_shells))
        return false;
      if (!this.shells.equals(that.shells))
        return false;
    }

    boolean this_present_yourFlags = true;
    boolean that_present_yourFlags = true;
    if (this_present_yourFlags || that_present_yourFlags) {
      if (!(this_present_yourFlags && that_present_yourFlags))
        return false;
      if (this.yourFlags != that.yourFlags)
        return false;
    }

    boolean this_present_enemyFlags = true;
    boolean that_present_enemyFlags = true;
    if (this_present_enemyFlags || that_present_enemyFlags) {
      if (!(this_present_enemyFlags && that_present_enemyFlags))
        return false;
      if (this.enemyFlags != that.enemyFlags)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTanks()) ? 131071 : 524287);
    if (isSetTanks())
      hashCode = hashCode * 8191 + tanks.hashCode();

    hashCode = hashCode * 8191 + ((isSetShells()) ? 131071 : 524287);
    if (isSetShells())
      hashCode = hashCode * 8191 + shells.hashCode();

    hashCode = hashCode * 8191 + yourFlags;

    hashCode = hashCode * 8191 + enemyFlags;

    return hashCode;
  }

  @Override
  public int compareTo(State other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTanks()).compareTo(other.isSetTanks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTanks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tanks, other.tanks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShells()).compareTo(other.isSetShells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shells, other.shells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYourFlags()).compareTo(other.isSetYourFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYourFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yourFlags, other.yourFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnemyFlags()).compareTo(other.isSetEnemyFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnemyFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enemyFlags, other.enemyFlags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("State(");
    boolean first = true;

    sb.append("tanks:");
    if (this.tanks == null) {
      sb.append("null");
    } else {
      sb.append(this.tanks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shells:");
    if (this.shells == null) {
      sb.append("null");
    } else {
      sb.append(this.shells);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("yourFlags:");
    sb.append(this.yourFlags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enemyFlags:");
    sb.append(this.enemyFlags);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StateStandardScheme getScheme() {
      return new StateStandardScheme();
    }
  }

  private static class StateStandardScheme extends org.apache.thrift.scheme.StandardScheme<State> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, State struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TANKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tanks = new java.util.ArrayList<Tank>(_list0.size);
                Tank _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Tank();
                  _elem1.read(iprot);
                  struct.tanks.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTanksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.shells = new java.util.ArrayList<Shell>(_list3.size);
                Shell _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Shell();
                  _elem4.read(iprot);
                  struct.shells.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setShellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YOUR_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.yourFlags = iprot.readI32();
              struct.setYourFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENEMY_FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enemyFlags = iprot.readI32();
              struct.setEnemyFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, State struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tanks != null) {
        oprot.writeFieldBegin(TANKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tanks.size()));
          for (Tank _iter6 : struct.tanks)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.shells != null) {
        oprot.writeFieldBegin(SHELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.shells.size()));
          for (Shell _iter7 : struct.shells)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YOUR_FLAGS_FIELD_DESC);
      oprot.writeI32(struct.yourFlags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENEMY_FLAGS_FIELD_DESC);
      oprot.writeI32(struct.enemyFlags);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StateTupleScheme getScheme() {
      return new StateTupleScheme();
    }
  }

  private static class StateTupleScheme extends org.apache.thrift.scheme.TupleScheme<State> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, State struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTanks()) {
        optionals.set(0);
      }
      if (struct.isSetShells()) {
        optionals.set(1);
      }
      if (struct.isSetYourFlags()) {
        optionals.set(2);
      }
      if (struct.isSetEnemyFlags()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTanks()) {
        {
          oprot.writeI32(struct.tanks.size());
          for (Tank _iter8 : struct.tanks)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetShells()) {
        {
          oprot.writeI32(struct.shells.size());
          for (Shell _iter9 : struct.shells)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetYourFlags()) {
        oprot.writeI32(struct.yourFlags);
      }
      if (struct.isSetEnemyFlags()) {
        oprot.writeI32(struct.enemyFlags);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, State struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tanks = new java.util.ArrayList<Tank>(_list10.size);
          Tank _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new Tank();
            _elem11.read(iprot);
            struct.tanks.add(_elem11);
          }
        }
        struct.setTanksIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.shells = new java.util.ArrayList<Shell>(_list13.size);
          Shell _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Shell();
            _elem14.read(iprot);
            struct.shells.add(_elem14);
          }
        }
        struct.setShellsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.yourFlags = iprot.readI32();
        struct.setYourFlagsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enemyFlags = iprot.readI32();
        struct.setEnemyFlagsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

