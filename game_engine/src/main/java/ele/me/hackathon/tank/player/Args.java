/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ele.me.hackathon.tank.player;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-13")
public class Args implements org.apache.thrift.TBase<Args, Args._Fields>, java.io.Serializable, Cloneable, Comparable<Args> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Args");

  private static final org.apache.thrift.protocol.TField TANK_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("tankSpeed", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SHELL_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("shellSpeed", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TANK_HP_FIELD_DESC = new org.apache.thrift.protocol.TField("tankHP", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TANK_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("tankScore", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FLAG_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("flagScore", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRound", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROUND_TIMEOUT_IN_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("roundTimeoutInMs", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgsTupleSchemeFactory();

  public int tankSpeed; // required
  public int shellSpeed; // required
  public int tankHP; // required
  public int tankScore; // required
  public int flagScore; // required
  public int maxRound; // required
  public int roundTimeoutInMs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TANK_SPEED((short)1, "tankSpeed"),
    SHELL_SPEED((short)2, "shellSpeed"),
    TANK_HP((short)3, "tankHP"),
    TANK_SCORE((short)4, "tankScore"),
    FLAG_SCORE((short)5, "flagScore"),
    MAX_ROUND((short)6, "maxRound"),
    ROUND_TIMEOUT_IN_MS((short)7, "roundTimeoutInMs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TANK_SPEED
          return TANK_SPEED;
        case 2: // SHELL_SPEED
          return SHELL_SPEED;
        case 3: // TANK_HP
          return TANK_HP;
        case 4: // TANK_SCORE
          return TANK_SCORE;
        case 5: // FLAG_SCORE
          return FLAG_SCORE;
        case 6: // MAX_ROUND
          return MAX_ROUND;
        case 7: // ROUND_TIMEOUT_IN_MS
          return ROUND_TIMEOUT_IN_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TANKSPEED_ISSET_ID = 0;
  private static final int __SHELLSPEED_ISSET_ID = 1;
  private static final int __TANKHP_ISSET_ID = 2;
  private static final int __TANKSCORE_ISSET_ID = 3;
  private static final int __FLAGSCORE_ISSET_ID = 4;
  private static final int __MAXROUND_ISSET_ID = 5;
  private static final int __ROUNDTIMEOUTINMS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TANK_SPEED, new org.apache.thrift.meta_data.FieldMetaData("tankSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHELL_SPEED, new org.apache.thrift.meta_data.FieldMetaData("shellSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TANK_HP, new org.apache.thrift.meta_data.FieldMetaData("tankHP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TANK_SCORE, new org.apache.thrift.meta_data.FieldMetaData("tankScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAG_SCORE, new org.apache.thrift.meta_data.FieldMetaData("flagScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_ROUND, new org.apache.thrift.meta_data.FieldMetaData("maxRound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROUND_TIMEOUT_IN_MS, new org.apache.thrift.meta_data.FieldMetaData("roundTimeoutInMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Args.class, metaDataMap);
  }

  public Args() {
  }

  public Args(
    int tankSpeed,
    int shellSpeed,
    int tankHP,
    int tankScore,
    int flagScore,
    int maxRound,
    int roundTimeoutInMs)
  {
    this();
    this.tankSpeed = tankSpeed;
    setTankSpeedIsSet(true);
    this.shellSpeed = shellSpeed;
    setShellSpeedIsSet(true);
    this.tankHP = tankHP;
    setTankHPIsSet(true);
    this.tankScore = tankScore;
    setTankScoreIsSet(true);
    this.flagScore = flagScore;
    setFlagScoreIsSet(true);
    this.maxRound = maxRound;
    setMaxRoundIsSet(true);
    this.roundTimeoutInMs = roundTimeoutInMs;
    setRoundTimeoutInMsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Args(Args other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tankSpeed = other.tankSpeed;
    this.shellSpeed = other.shellSpeed;
    this.tankHP = other.tankHP;
    this.tankScore = other.tankScore;
    this.flagScore = other.flagScore;
    this.maxRound = other.maxRound;
    this.roundTimeoutInMs = other.roundTimeoutInMs;
  }

  public Args deepCopy() {
    return new Args(this);
  }

  @Override
  public void clear() {
    setTankSpeedIsSet(false);
    this.tankSpeed = 0;
    setShellSpeedIsSet(false);
    this.shellSpeed = 0;
    setTankHPIsSet(false);
    this.tankHP = 0;
    setTankScoreIsSet(false);
    this.tankScore = 0;
    setFlagScoreIsSet(false);
    this.flagScore = 0;
    setMaxRoundIsSet(false);
    this.maxRound = 0;
    setRoundTimeoutInMsIsSet(false);
    this.roundTimeoutInMs = 0;
  }

  public int getTankSpeed() {
    return this.tankSpeed;
  }

  public Args setTankSpeed(int tankSpeed) {
    this.tankSpeed = tankSpeed;
    setTankSpeedIsSet(true);
    return this;
  }

  public void unsetTankSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TANKSPEED_ISSET_ID);
  }

  /** Returns true if field tankSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetTankSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TANKSPEED_ISSET_ID);
  }

  public void setTankSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TANKSPEED_ISSET_ID, value);
  }

  public int getShellSpeed() {
    return this.shellSpeed;
  }

  public Args setShellSpeed(int shellSpeed) {
    this.shellSpeed = shellSpeed;
    setShellSpeedIsSet(true);
    return this;
  }

  public void unsetShellSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHELLSPEED_ISSET_ID);
  }

  /** Returns true if field shellSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetShellSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHELLSPEED_ISSET_ID);
  }

  public void setShellSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHELLSPEED_ISSET_ID, value);
  }

  public int getTankHP() {
    return this.tankHP;
  }

  public Args setTankHP(int tankHP) {
    this.tankHP = tankHP;
    setTankHPIsSet(true);
    return this;
  }

  public void unsetTankHP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TANKHP_ISSET_ID);
  }

  /** Returns true if field tankHP is set (has been assigned a value) and false otherwise */
  public boolean isSetTankHP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TANKHP_ISSET_ID);
  }

  public void setTankHPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TANKHP_ISSET_ID, value);
  }

  public int getTankScore() {
    return this.tankScore;
  }

  public Args setTankScore(int tankScore) {
    this.tankScore = tankScore;
    setTankScoreIsSet(true);
    return this;
  }

  public void unsetTankScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TANKSCORE_ISSET_ID);
  }

  /** Returns true if field tankScore is set (has been assigned a value) and false otherwise */
  public boolean isSetTankScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TANKSCORE_ISSET_ID);
  }

  public void setTankScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TANKSCORE_ISSET_ID, value);
  }

  public int getFlagScore() {
    return this.flagScore;
  }

  public Args setFlagScore(int flagScore) {
    this.flagScore = flagScore;
    setFlagScoreIsSet(true);
    return this;
  }

  public void unsetFlagScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGSCORE_ISSET_ID);
  }

  /** Returns true if field flagScore is set (has been assigned a value) and false otherwise */
  public boolean isSetFlagScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGSCORE_ISSET_ID);
  }

  public void setFlagScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGSCORE_ISSET_ID, value);
  }

  public int getMaxRound() {
    return this.maxRound;
  }

  public Args setMaxRound(int maxRound) {
    this.maxRound = maxRound;
    setMaxRoundIsSet(true);
    return this;
  }

  public void unsetMaxRound() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXROUND_ISSET_ID);
  }

  /** Returns true if field maxRound is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRound() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXROUND_ISSET_ID);
  }

  public void setMaxRoundIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXROUND_ISSET_ID, value);
  }

  public int getRoundTimeoutInMs() {
    return this.roundTimeoutInMs;
  }

  public Args setRoundTimeoutInMs(int roundTimeoutInMs) {
    this.roundTimeoutInMs = roundTimeoutInMs;
    setRoundTimeoutInMsIsSet(true);
    return this;
  }

  public void unsetRoundTimeoutInMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROUNDTIMEOUTINMS_ISSET_ID);
  }

  /** Returns true if field roundTimeoutInMs is set (has been assigned a value) and false otherwise */
  public boolean isSetRoundTimeoutInMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROUNDTIMEOUTINMS_ISSET_ID);
  }

  public void setRoundTimeoutInMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROUNDTIMEOUTINMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TANK_SPEED:
      if (value == null) {
        unsetTankSpeed();
      } else {
        setTankSpeed((java.lang.Integer)value);
      }
      break;

    case SHELL_SPEED:
      if (value == null) {
        unsetShellSpeed();
      } else {
        setShellSpeed((java.lang.Integer)value);
      }
      break;

    case TANK_HP:
      if (value == null) {
        unsetTankHP();
      } else {
        setTankHP((java.lang.Integer)value);
      }
      break;

    case TANK_SCORE:
      if (value == null) {
        unsetTankScore();
      } else {
        setTankScore((java.lang.Integer)value);
      }
      break;

    case FLAG_SCORE:
      if (value == null) {
        unsetFlagScore();
      } else {
        setFlagScore((java.lang.Integer)value);
      }
      break;

    case MAX_ROUND:
      if (value == null) {
        unsetMaxRound();
      } else {
        setMaxRound((java.lang.Integer)value);
      }
      break;

    case ROUND_TIMEOUT_IN_MS:
      if (value == null) {
        unsetRoundTimeoutInMs();
      } else {
        setRoundTimeoutInMs((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TANK_SPEED:
      return getTankSpeed();

    case SHELL_SPEED:
      return getShellSpeed();

    case TANK_HP:
      return getTankHP();

    case TANK_SCORE:
      return getTankScore();

    case FLAG_SCORE:
      return getFlagScore();

    case MAX_ROUND:
      return getMaxRound();

    case ROUND_TIMEOUT_IN_MS:
      return getRoundTimeoutInMs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TANK_SPEED:
      return isSetTankSpeed();
    case SHELL_SPEED:
      return isSetShellSpeed();
    case TANK_HP:
      return isSetTankHP();
    case TANK_SCORE:
      return isSetTankScore();
    case FLAG_SCORE:
      return isSetFlagScore();
    case MAX_ROUND:
      return isSetMaxRound();
    case ROUND_TIMEOUT_IN_MS:
      return isSetRoundTimeoutInMs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Args)
      return this.equals((Args)that);
    return false;
  }

  public boolean equals(Args that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tankSpeed = true;
    boolean that_present_tankSpeed = true;
    if (this_present_tankSpeed || that_present_tankSpeed) {
      if (!(this_present_tankSpeed && that_present_tankSpeed))
        return false;
      if (this.tankSpeed != that.tankSpeed)
        return false;
    }

    boolean this_present_shellSpeed = true;
    boolean that_present_shellSpeed = true;
    if (this_present_shellSpeed || that_present_shellSpeed) {
      if (!(this_present_shellSpeed && that_present_shellSpeed))
        return false;
      if (this.shellSpeed != that.shellSpeed)
        return false;
    }

    boolean this_present_tankHP = true;
    boolean that_present_tankHP = true;
    if (this_present_tankHP || that_present_tankHP) {
      if (!(this_present_tankHP && that_present_tankHP))
        return false;
      if (this.tankHP != that.tankHP)
        return false;
    }

    boolean this_present_tankScore = true;
    boolean that_present_tankScore = true;
    if (this_present_tankScore || that_present_tankScore) {
      if (!(this_present_tankScore && that_present_tankScore))
        return false;
      if (this.tankScore != that.tankScore)
        return false;
    }

    boolean this_present_flagScore = true;
    boolean that_present_flagScore = true;
    if (this_present_flagScore || that_present_flagScore) {
      if (!(this_present_flagScore && that_present_flagScore))
        return false;
      if (this.flagScore != that.flagScore)
        return false;
    }

    boolean this_present_maxRound = true;
    boolean that_present_maxRound = true;
    if (this_present_maxRound || that_present_maxRound) {
      if (!(this_present_maxRound && that_present_maxRound))
        return false;
      if (this.maxRound != that.maxRound)
        return false;
    }

    boolean this_present_roundTimeoutInMs = true;
    boolean that_present_roundTimeoutInMs = true;
    if (this_present_roundTimeoutInMs || that_present_roundTimeoutInMs) {
      if (!(this_present_roundTimeoutInMs && that_present_roundTimeoutInMs))
        return false;
      if (this.roundTimeoutInMs != that.roundTimeoutInMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tankSpeed;

    hashCode = hashCode * 8191 + shellSpeed;

    hashCode = hashCode * 8191 + tankHP;

    hashCode = hashCode * 8191 + tankScore;

    hashCode = hashCode * 8191 + flagScore;

    hashCode = hashCode * 8191 + maxRound;

    hashCode = hashCode * 8191 + roundTimeoutInMs;

    return hashCode;
  }

  @Override
  public int compareTo(Args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTankSpeed()).compareTo(other.isSetTankSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTankSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tankSpeed, other.tankSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetShellSpeed()).compareTo(other.isSetShellSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShellSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shellSpeed, other.shellSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTankHP()).compareTo(other.isSetTankHP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTankHP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tankHP, other.tankHP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTankScore()).compareTo(other.isSetTankScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTankScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tankScore, other.tankScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlagScore()).compareTo(other.isSetFlagScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlagScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flagScore, other.flagScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxRound()).compareTo(other.isSetMaxRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRound, other.maxRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoundTimeoutInMs()).compareTo(other.isSetRoundTimeoutInMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoundTimeoutInMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundTimeoutInMs, other.roundTimeoutInMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Args(");
    boolean first = true;

    sb.append("tankSpeed:");
    sb.append(this.tankSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shellSpeed:");
    sb.append(this.shellSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tankHP:");
    sb.append(this.tankHP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tankScore:");
    sb.append(this.tankScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flagScore:");
    sb.append(this.flagScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxRound:");
    sb.append(this.maxRound);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roundTimeoutInMs:");
    sb.append(this.roundTimeoutInMs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArgsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArgsStandardScheme getScheme() {
      return new ArgsStandardScheme();
    }
  }

  private static class ArgsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Args> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Args struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TANK_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tankSpeed = iprot.readI32();
              struct.setTankSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHELL_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shellSpeed = iprot.readI32();
              struct.setShellSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TANK_HP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tankHP = iprot.readI32();
              struct.setTankHPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TANK_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tankScore = iprot.readI32();
              struct.setTankScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLAG_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flagScore = iprot.readI32();
              struct.setFlagScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxRound = iprot.readI32();
              struct.setMaxRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROUND_TIMEOUT_IN_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roundTimeoutInMs = iprot.readI32();
              struct.setRoundTimeoutInMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Args struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TANK_SPEED_FIELD_DESC);
      oprot.writeI32(struct.tankSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHELL_SPEED_FIELD_DESC);
      oprot.writeI32(struct.shellSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TANK_HP_FIELD_DESC);
      oprot.writeI32(struct.tankHP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TANK_SCORE_FIELD_DESC);
      oprot.writeI32(struct.tankScore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_SCORE_FIELD_DESC);
      oprot.writeI32(struct.flagScore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ROUND_FIELD_DESC);
      oprot.writeI32(struct.maxRound);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROUND_TIMEOUT_IN_MS_FIELD_DESC);
      oprot.writeI32(struct.roundTimeoutInMs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArgsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArgsTupleScheme getScheme() {
      return new ArgsTupleScheme();
    }
  }

  private static class ArgsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Args> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Args struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTankSpeed()) {
        optionals.set(0);
      }
      if (struct.isSetShellSpeed()) {
        optionals.set(1);
      }
      if (struct.isSetTankHP()) {
        optionals.set(2);
      }
      if (struct.isSetTankScore()) {
        optionals.set(3);
      }
      if (struct.isSetFlagScore()) {
        optionals.set(4);
      }
      if (struct.isSetMaxRound()) {
        optionals.set(5);
      }
      if (struct.isSetRoundTimeoutInMs()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTankSpeed()) {
        oprot.writeI32(struct.tankSpeed);
      }
      if (struct.isSetShellSpeed()) {
        oprot.writeI32(struct.shellSpeed);
      }
      if (struct.isSetTankHP()) {
        oprot.writeI32(struct.tankHP);
      }
      if (struct.isSetTankScore()) {
        oprot.writeI32(struct.tankScore);
      }
      if (struct.isSetFlagScore()) {
        oprot.writeI32(struct.flagScore);
      }
      if (struct.isSetMaxRound()) {
        oprot.writeI32(struct.maxRound);
      }
      if (struct.isSetRoundTimeoutInMs()) {
        oprot.writeI32(struct.roundTimeoutInMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Args struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.tankSpeed = iprot.readI32();
        struct.setTankSpeedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shellSpeed = iprot.readI32();
        struct.setShellSpeedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tankHP = iprot.readI32();
        struct.setTankHPIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tankScore = iprot.readI32();
        struct.setTankScoreIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flagScore = iprot.readI32();
        struct.setFlagScoreIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxRound = iprot.readI32();
        struct.setMaxRoundIsSet(true);
      }
      if (incoming.get(6)) {
        struct.roundTimeoutInMs = iprot.readI32();
        struct.setRoundTimeoutInMsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

