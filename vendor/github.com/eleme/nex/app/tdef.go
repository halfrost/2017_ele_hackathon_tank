package app

/*
Most of the code is generated by following thrift definition:
service NexThriftDefinitionService {
	string __api_defination_thrift_v1(),
}
*/

import (
	"context"
	"fmt"
	"io/ioutil"
	"sync"

	"github.com/apache/thrift/lib/go/thrift"
)

// ThriftDefinitionAPIName is the API name to get thrift definition.
const ThriftDefinitionAPIName = "__api_defination_thrift_v1"

var (
	apiArgsName   = fmt.Sprintf("%s_args", ThriftDefinitionAPIName)
	apiResultName = fmt.Sprintf("%s_result", ThriftDefinitionAPIName)
)

type thriftDefinitionHandler struct {
	sync.Once
	thriftPath string
	cache      string
}

func (h *thriftDefinitionHandler) APIDefinationThrift() (string, error) {
	var err error
	h.Do(func() {
		var data []byte
		data, err = ioutil.ReadFile(h.thriftPath)
		if err != nil {
			return
		}
		h.cache = string(data)
	})
	return h.cache, err
}

// NewNexThriftDefinitionCtxProcessorFunc creates a new NexThriftDefinitionCtxProcessorFunc.
func NewNexThriftDefinitionCtxProcessorFunc(thriftPath string) *NexThriftDefinitionCtxProcessorFunc {
	return &NexThriftDefinitionCtxProcessorFunc{
		handler: &thriftDefinitionHandler{thriftPath: thriftPath},
	}
}

type nexThriftDefinitionService interface {
	APIDefinationThrift() (r string, err error)
}

// NexThriftDefinitionCtxProcessorFunc is a thrift.TProcessorFunction.
type NexThriftDefinitionCtxProcessorFunc struct {
	handler nexThriftDefinitionService
}

// Process process request.
func (p *NexThriftDefinitionCtxProcessorFunc) Process(_ context.Context, seqID int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := thriftDefinationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin(ThriftDefinitionAPIName, thrift.EXCEPTION, seqID)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := thriftDefinationResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.APIDefinationThrift(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing __api_defination_thrift_v1: "+err2.Error())
		oprot.WriteMessageBegin(ThriftDefinitionAPIName, thrift.EXCEPTION, seqID)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	result.Success = &retval
	if err2 = oprot.WriteMessageBegin(ThriftDefinitionAPIName, thrift.REPLY, seqID); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type thriftDefinationArgs struct{}

func (p *thriftDefinationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeID, fieldID, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldID), err)
		}
		if fieldTypeID == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeID); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *thriftDefinationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(apiArgsName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

// Attributes:
//  - Success
type thriftDefinationResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func (p *thriftDefinationResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ""
	}
	return *p.Success
}

func (p *thriftDefinationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *thriftDefinationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeID, fieldID, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldID), err)
		}
		if fieldTypeID == thrift.STOP {
			break
		}
		switch fieldID {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeID); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *thriftDefinationResult) ReadField0(iprot thrift.TProtocol) error {
	v, err := iprot.ReadString()
	if err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	}
	p.Success = &v
	return nil
}

func (p *thriftDefinationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(apiResultName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *thriftDefinationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}
