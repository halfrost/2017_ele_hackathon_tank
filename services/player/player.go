// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package player

import (
	"bytes"
	"reflect"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	tracker "github.com/eleme/thrift-tracker"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = reflect.DeepEqual
var _ = context.TODO()
var _ = tracker.TrackingAPIName
var _ = bytes.Equal

type Direction int64
const (
  Direction_UP Direction = 1
  Direction_DOWN Direction = 2
  Direction_LEFT Direction = 3
  Direction_RIGHT Direction = 4
)

func (p Direction) String() string {
  switch p {
  case Direction_UP: return "UP"
  case Direction_DOWN: return "DOWN"
  case Direction_LEFT: return "LEFT"
  case Direction_RIGHT: return "RIGHT"
  }
  return "<UNSET>"
}

func DirectionFromString(s string) (Direction, error) {
  switch s {
  case "UP": return Direction_UP, nil 
  case "DOWN": return Direction_DOWN, nil 
  case "LEFT": return Direction_LEFT, nil 
  case "RIGHT": return Direction_RIGHT, nil 
  }
  return Direction(0), fmt.Errorf("not a valid Direction string")
}


func DirectionPtr(v Direction) *Direction { return &v }

func (p Direction) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Direction) UnmarshalText(text []byte) error {
q, err := DirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Direction) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Direction(v)
return nil
}

func (p * Direction) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Exceptions
type PlayerErrorCode int64
const (
  PlayerErrorCode_UNKNOWN_ERROR PlayerErrorCode = 0
  PlayerErrorCode_DATABASE_ERROR PlayerErrorCode = 1
  PlayerErrorCode_TOO_BUSY_ERROR PlayerErrorCode = 2
)

func (p PlayerErrorCode) String() string {
  switch p {
  case PlayerErrorCode_UNKNOWN_ERROR: return "UNKNOWN_ERROR"
  case PlayerErrorCode_DATABASE_ERROR: return "DATABASE_ERROR"
  case PlayerErrorCode_TOO_BUSY_ERROR: return "TOO_BUSY_ERROR"
  }
  return "<UNSET>"
}

func PlayerErrorCodeFromString(s string) (PlayerErrorCode, error) {
  switch s {
  case "UNKNOWN_ERROR": return PlayerErrorCode_UNKNOWN_ERROR, nil 
  case "DATABASE_ERROR": return PlayerErrorCode_DATABASE_ERROR, nil 
  case "TOO_BUSY_ERROR": return PlayerErrorCode_TOO_BUSY_ERROR, nil 
  }
  return PlayerErrorCode(0), fmt.Errorf("not a valid PlayerErrorCode string")
}


func PlayerErrorCodePtr(v PlayerErrorCode) *PlayerErrorCode { return &v }

func (p PlayerErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PlayerErrorCode) UnmarshalText(text []byte) error {
q, err := PlayerErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PlayerErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PlayerErrorCode(v)
return nil
}

func (p * PlayerErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Types and Structures
type Timestamp int64

func TimestampPtr(v Timestamp) *Timestamp { return &v }

// Attributes:
//  - ID
//  - Title
//  - CreatedAt
type TTodo struct {
  ID int64 `thrift:"id,1,required" db:"id" json:"id"`
  Title string `thrift:"title,2,required" db:"title" json:"title"`
  CreatedAt Timestamp `thrift:"created_at,3,required" db:"created_at" json:"created_at"`
}

func NewTTodo() *TTodo {
  return &TTodo{}
}


func (p *TTodo) GetID() int64 {
  return p.ID
}

func (p *TTodo) GetTitle() string {
  return p.Title
}

func (p *TTodo) GetCreatedAt() Timestamp {
  return p.CreatedAt
}
func (p *TTodo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetTitle bool = false;
  var issetCreatedAt bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetID = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTitle = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCreatedAt = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetTitle{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"));
  }
  if !issetCreatedAt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatedAt is not set"));
  }
  return nil
}

func (p *TTodo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TTodo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *TTodo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Timestamp(v)
  p.CreatedAt = temp
}
  return nil
}

func (p *TTodo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTodo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTodo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TTodo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *TTodo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:created_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:created_at: ", p), err) }
  return err
}

func (p *TTodo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTodo(%+v)", *p)
}

// Attributes:
//  - X
//  - Y
type Position struct {
  X int32 `thrift:"x,1" db:"x" json:"x"`
  Y int32 `thrift:"y,2" db:"y" json:"y"`
}

func NewPosition() *Position {
  return &Position{}
}


func (p *Position) GetX() int32 {
  return p.X
}

func (p *Position) GetY() int32 {
  return p.Y
}
func (p *Position) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Position)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.X = v
}
  return nil
}

func (p *Position)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Y = v
}
  return nil
}

func (p *Position) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Position"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Position) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("x", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err) }
  if err := oprot.WriteI32(int32(p.X)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err) }
  return err
}

func (p *Position) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("y", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err) }
  if err := oprot.WriteI32(int32(p.Y)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err) }
  return err
}

func (p *Position) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Position(%+v)", *p)
}

// Attributes:
//  - ID
//  - Pos
//  - Dir
//  - Hp
type Tank struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Pos *Position `thrift:"pos,2" db:"pos" json:"pos"`
  Dir Direction `thrift:"dir,3" db:"dir" json:"dir"`
  Hp int32 `thrift:"hp,4" db:"hp" json:"hp"`
}

func NewTank() *Tank {
  return &Tank{}
}


func (p *Tank) GetID() int32 {
  return p.ID
}
var Tank_Pos_DEFAULT *Position
func (p *Tank) GetPos() *Position {
  if !p.IsSetPos() {
    return Tank_Pos_DEFAULT
  }
return p.Pos
}

func (p *Tank) GetDir() Direction {
  return p.Dir
}

func (p *Tank) GetHp() int32 {
  return p.Hp
}
func (p *Tank) IsSetPos() bool {
  return p.Pos != nil
}

func (p *Tank) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Tank)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Tank)  ReadField2(iprot thrift.TProtocol) error {
  p.Pos = &Position{}
  if err := p.Pos.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pos), err)
  }
  return nil
}

func (p *Tank)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Direction(v)
  p.Dir = temp
}
  return nil
}

func (p *Tank)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hp = v
}
  return nil
}

func (p *Tank) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Tank"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tank) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Tank) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pos", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pos: ", p), err) }
  if err := p.Pos.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pos), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pos: ", p), err) }
  return err
}

func (p *Tank) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dir: ", p), err) }
  if err := oprot.WriteI32(int32(p.Dir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dir: ", p), err) }
  return err
}

func (p *Tank) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hp", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hp: ", p), err) }
  if err := oprot.WriteI32(int32(p.Hp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hp: ", p), err) }
  return err
}

func (p *Tank) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tank(%+v)", *p)
}

// Attributes:
//  - ID
//  - Pos
//  - Dir
type Shell struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Pos *Position `thrift:"pos,2" db:"pos" json:"pos"`
  Dir Direction `thrift:"dir,3" db:"dir" json:"dir"`
}

func NewShell() *Shell {
  return &Shell{}
}


func (p *Shell) GetID() int32 {
  return p.ID
}
var Shell_Pos_DEFAULT *Position
func (p *Shell) GetPos() *Position {
  if !p.IsSetPos() {
    return Shell_Pos_DEFAULT
  }
return p.Pos
}

func (p *Shell) GetDir() Direction {
  return p.Dir
}
func (p *Shell) IsSetPos() bool {
  return p.Pos != nil
}

func (p *Shell) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Shell)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Shell)  ReadField2(iprot thrift.TProtocol) error {
  p.Pos = &Position{}
  if err := p.Pos.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pos), err)
  }
  return nil
}

func (p *Shell)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Direction(v)
  p.Dir = temp
}
  return nil
}

func (p *Shell) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Shell"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Shell) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Shell) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pos", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pos: ", p), err) }
  if err := p.Pos.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pos), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pos: ", p), err) }
  return err
}

func (p *Shell) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dir: ", p), err) }
  if err := oprot.WriteI32(int32(p.Dir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dir: ", p), err) }
  return err
}

func (p *Shell) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Shell(%+v)", *p)
}

// Attributes:
//  - Tanks
//  - Shells
//  - YourFlagNo
//  - EnemyFlagNo
//  - FlagPos
type GameState struct {
  Tanks []*Tank `thrift:"tanks,1" db:"tanks" json:"tanks"`
  Shells []*Shell `thrift:"shells,2" db:"shells" json:"shells"`
  YourFlagNo int32 `thrift:"yourFlagNo,3" db:"yourFlagNo" json:"yourFlagNo"`
  EnemyFlagNo int32 `thrift:"enemyFlagNo,4" db:"enemyFlagNo" json:"enemyFlagNo"`
  FlagPos *Position `thrift:"flagPos,5" db:"flagPos" json:"flagPos,omitempty"`
}

func NewGameState() *GameState {
  return &GameState{}
}


func (p *GameState) GetTanks() []*Tank {
  return p.Tanks
}

func (p *GameState) GetShells() []*Shell {
  return p.Shells
}

func (p *GameState) GetYourFlagNo() int32 {
  return p.YourFlagNo
}

func (p *GameState) GetEnemyFlagNo() int32 {
  return p.EnemyFlagNo
}
var GameState_FlagPos_DEFAULT *Position
func (p *GameState) GetFlagPos() *Position {
  if !p.IsSetFlagPos() {
    return GameState_FlagPos_DEFAULT
  }
return p.FlagPos
}
func (p *GameState) IsSetFlagPos() bool {
  return p.FlagPos != nil
}

func (p *GameState) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GameState)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tank, 0, size)
  p.Tanks =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Tank{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Tanks = append(p.Tanks, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GameState)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Shell, 0, size)
  p.Shells =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Shell{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Shells = append(p.Shells, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GameState)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.YourFlagNo = v
}
  return nil
}

func (p *GameState)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EnemyFlagNo = v
}
  return nil
}

func (p *GameState)  ReadField5(iprot thrift.TProtocol) error {
  p.FlagPos = &Position{}
  if err := p.FlagPos.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FlagPos), err)
  }
  return nil
}

func (p *GameState) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GameState"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GameState) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tanks", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tanks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tanks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tanks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tanks: ", p), err) }
  return err
}

func (p *GameState) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shells", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shells: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Shells)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Shells {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shells: ", p), err) }
  return err
}

func (p *GameState) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yourFlagNo", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yourFlagNo: ", p), err) }
  if err := oprot.WriteI32(int32(p.YourFlagNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yourFlagNo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yourFlagNo: ", p), err) }
  return err
}

func (p *GameState) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enemyFlagNo", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enemyFlagNo: ", p), err) }
  if err := oprot.WriteI32(int32(p.EnemyFlagNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enemyFlagNo (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enemyFlagNo: ", p), err) }
  return err
}

func (p *GameState) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetFlagPos() {
    if err := oprot.WriteFieldBegin("flagPos", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flagPos: ", p), err) }
    if err := p.FlagPos.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FlagPos), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flagPos: ", p), err) }
  }
  return err
}

func (p *GameState) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GameState(%+v)", *p)
}

// Attributes:
//  - TankId: DO NOT try to send a order with competitor's tank id.
// In that case, game engine will treat it as cheat and would ignore ALL this player's orders in this round.
// 
//  - Order: Possible orders are: turnTo, fire, move. All others words are illegal and will be ignored.
// If want a tank to stick around, just do NOT send any order with that tank.
// 
//  - Dir: the dir are always on base of the map instead of the tank itself,
// which mean if a 'fire' order with UP direction will made the tank fire a shell toward the UP diction of the map.
// 
// Only move order does not need a direction, in that case just give a direction and game engine will ignore it.
// 
type Order struct {
  TankId int32 `thrift:"tankId,1" db:"tankId" json:"tankId"`
  Order string `thrift:"order,2" db:"order" json:"order"`
  Dir Direction `thrift:"dir,3" db:"dir" json:"dir"`
}

func NewOrder() *Order {
  return &Order{}
}


func (p *Order) GetTankId() int32 {
  return p.TankId
}

func (p *Order) GetOrder() string {
  return p.Order
}

func (p *Order) GetDir() Direction {
  return p.Dir
}
func (p *Order) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Order)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TankId = v
}
  return nil
}

func (p *Order)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Order = v
}
  return nil
}

func (p *Order)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Direction(v)
  p.Dir = temp
}
  return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Order"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tankId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tankId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TankId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tankId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tankId: ", p), err) }
  return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order: ", p), err) }
  if err := oprot.WriteString(string(p.Order)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order: ", p), err) }
  return err
}

func (p *Order) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dir: ", p), err) }
  if err := oprot.WriteI32(int32(p.Dir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dir: ", p), err) }
  return err
}

func (p *Order) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Order(%+v)", *p)
}

// Attributes:
//  - TankSpeed
//  - ShellSpeed
//  - TankHP
//  - TankScore
//  - FlagScore
//  - MaxRound
//  - RoundTimeoutInMs
type Args_ struct {
  TankSpeed int32 `thrift:"tankSpeed,1" db:"tankSpeed" json:"tankSpeed"`
  ShellSpeed int32 `thrift:"shellSpeed,2" db:"shellSpeed" json:"shellSpeed"`
  TankHP int32 `thrift:"tankHP,3" db:"tankHP" json:"tankHP"`
  TankScore int32 `thrift:"tankScore,4" db:"tankScore" json:"tankScore"`
  FlagScore int32 `thrift:"flagScore,5" db:"flagScore" json:"flagScore"`
  MaxRound int32 `thrift:"maxRound,6" db:"maxRound" json:"maxRound"`
  RoundTimeoutInMs int32 `thrift:"roundTimeoutInMs,7" db:"roundTimeoutInMs" json:"roundTimeoutInMs"`
}

func NewArgs_() *Args_ {
  return &Args_{}
}


func (p *Args_) GetTankSpeed() int32 {
  return p.TankSpeed
}

func (p *Args_) GetShellSpeed() int32 {
  return p.ShellSpeed
}

func (p *Args_) GetTankHP() int32 {
  return p.TankHP
}

func (p *Args_) GetTankScore() int32 {
  return p.TankScore
}

func (p *Args_) GetFlagScore() int32 {
  return p.FlagScore
}

func (p *Args_) GetMaxRound() int32 {
  return p.MaxRound
}

func (p *Args_) GetRoundTimeoutInMs() int32 {
  return p.RoundTimeoutInMs
}
func (p *Args_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Args_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TankSpeed = v
}
  return nil
}

func (p *Args_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ShellSpeed = v
}
  return nil
}

func (p *Args_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TankHP = v
}
  return nil
}

func (p *Args_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TankScore = v
}
  return nil
}

func (p *Args_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FlagScore = v
}
  return nil
}

func (p *Args_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxRound = v
}
  return nil
}

func (p *Args_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RoundTimeoutInMs = v
}
  return nil
}

func (p *Args_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Args_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tankSpeed", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tankSpeed: ", p), err) }
  if err := oprot.WriteI32(int32(p.TankSpeed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tankSpeed (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tankSpeed: ", p), err) }
  return err
}

func (p *Args_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shellSpeed", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shellSpeed: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShellSpeed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shellSpeed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shellSpeed: ", p), err) }
  return err
}

func (p *Args_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tankHP", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tankHP: ", p), err) }
  if err := oprot.WriteI32(int32(p.TankHP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tankHP (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tankHP: ", p), err) }
  return err
}

func (p *Args_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tankScore", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tankScore: ", p), err) }
  if err := oprot.WriteI32(int32(p.TankScore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tankScore (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tankScore: ", p), err) }
  return err
}

func (p *Args_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flagScore", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flagScore: ", p), err) }
  if err := oprot.WriteI32(int32(p.FlagScore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flagScore (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flagScore: ", p), err) }
  return err
}

func (p *Args_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxRound", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxRound: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxRound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxRound (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxRound: ", p), err) }
  return err
}

func (p *Args_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roundTimeoutInMs", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:roundTimeoutInMs: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoundTimeoutInMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roundTimeoutInMs (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:roundTimeoutInMs: ", p), err) }
  return err
}

func (p *Args_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Args_(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type PlayerUserException struct {
  ErrorCode PlayerErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewPlayerUserException() *PlayerUserException {
  return &PlayerUserException{}
}


func (p *PlayerUserException) GetErrorCode() PlayerErrorCode {
  return p.ErrorCode
}

func (p *PlayerUserException) GetErrorName() string {
  return p.ErrorName
}
var PlayerUserException_Message_DEFAULT string
func (p *PlayerUserException) GetMessage() string {
  if !p.IsSetMessage() {
    return PlayerUserException_Message_DEFAULT
  }
return *p.Message
}
func (p *PlayerUserException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *PlayerUserException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  return nil
}

func (p *PlayerUserException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PlayerErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *PlayerUserException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *PlayerUserException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *PlayerUserException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("playerUserException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlayerUserException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *PlayerUserException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *PlayerUserException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *PlayerUserException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerUserException(%+v)", *p)
}

func (p *PlayerUserException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type PlayerSystemException struct {
  ErrorCode PlayerErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewPlayerSystemException() *PlayerSystemException {
  return &PlayerSystemException{}
}


func (p *PlayerSystemException) GetErrorCode() PlayerErrorCode {
  return p.ErrorCode
}

func (p *PlayerSystemException) GetErrorName() string {
  return p.ErrorName
}
var PlayerSystemException_Message_DEFAULT string
func (p *PlayerSystemException) GetMessage() string {
  if !p.IsSetMessage() {
    return PlayerSystemException_Message_DEFAULT
  }
return *p.Message
}
func (p *PlayerSystemException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *PlayerSystemException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  return nil
}

func (p *PlayerSystemException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PlayerErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *PlayerSystemException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *PlayerSystemException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *PlayerSystemException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("playerSystemException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlayerSystemException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *PlayerSystemException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *PlayerSystemException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *PlayerSystemException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerSystemException(%+v)", *p)
}

func (p *PlayerSystemException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type PlayerUnknownException struct {
  ErrorCode PlayerErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message string `thrift:"message,3,required" db:"message" json:"message"`
}

func NewPlayerUnknownException() *PlayerUnknownException {
  return &PlayerUnknownException{}
}


func (p *PlayerUnknownException) GetErrorCode() PlayerErrorCode {
  return p.ErrorCode
}

func (p *PlayerUnknownException) GetErrorName() string {
  return p.ErrorName
}

func (p *PlayerUnknownException) GetMessage() string {
  return p.Message
}
func (p *PlayerUnknownException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;
  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *PlayerUnknownException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PlayerErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *PlayerUnknownException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *PlayerUnknownException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *PlayerUnknownException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("playerUnknownException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlayerUnknownException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *PlayerUnknownException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *PlayerUnknownException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  return err
}

func (p *PlayerUnknownException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerUnknownException(%+v)", *p)
}

func (p *PlayerUnknownException) Error() string {
  return p.String()
}

type PlayerService interface {  //API

  Ping(ctx context.Context) (r bool, err error)
  // Upload the map to player.
  // The map is made of two-dimesional array of integer. The first dimension means row of the map. The second dimension means column of the map.
  // 
  // For example, if N is the map size, position(0,0) means upper left corner, position(0,N) means the upper right corner.
  // In the map array, 0 means empty field, 1 means barrier, 2 means woods, 3 means flag.
  // 
  // 
  // Parameters:
  //  - Gamemap
  UploadMap(ctx context.Context,gamemap [][]int32) (err error)
  // Parameters:
  //  - Arguments
  UploadParamters(ctx context.Context,arguments *Args_) (err error)
  // Assign a list of tank id to the player.
  // each player may have more than one tank, so the parameter is a list.
  // 
  // 
  // Parameters:
  //  - Tanks
  AssignTanks(ctx context.Context,tanks []int32) (err error)
  // Report latest game state to player.
  // 
  // 
  // Parameters:
  //  - State
  LatestState(ctx context.Context,state *GameState) (err error)
  // Ask for the tank orders for this round.
  // If this funtion does not return orders within the given round timeout, game engine will make all this player's tank to stick around.
  GetNewOrders(ctx context.Context) (r []*Order, err error)
}

//API
type PlayerServiceClient struct {
  Tracker tracker.Tracker
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewPlayerServiceClientFactory(ttracker tracker.Tracker, t thrift.TTransport, f thrift.TProtocolFactory) (*PlayerServiceClient, error) {
  iprot := f.GetProtocol(t)
  oprot := f.GetProtocol(t)
  if err := ttracker.Negotiation(1, iprot, oprot); err != nil {
      return nil, err
  }
  return &PlayerServiceClient{
    Tracker: ttracker,
    Transport: t,
    ProtocolFactory: f,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 1,
  }, nil
}

func NewPlayerServiceClientProtocol(ttracker tracker.Tracker, t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) (*PlayerServiceClient, error) {
  if err := ttracker.Negotiation(1, iprot, oprot); err != nil {
      return nil, err
  }
  return &PlayerServiceClient{
    Tracker: ttracker,
    Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 1,
  }, nil
}

func (p *PlayerServiceClient) Ping(ctx context.Context) (r bool, err error) {
  if err = p.sendPing(ctx); err != nil { return }
  return p.recvPing()
}

func (p *PlayerServiceClient) sendPing(ctx context.Context)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
      return
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
    return
}
args := PlayerServicePingArgs{
}
if err = args.Write(oprot); err != nil {
    return
}
if err = oprot.WriteMessageEnd(); err != nil {
    return
}
return oprot.Flush()
}


func (p *PlayerServiceClient) recvPing() (value bool, err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "ping" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
  return
}
if mTypeId == thrift.EXCEPTION {
  error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error3 error
  error3, err = error2.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error3
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
  return
}
result := PlayerServicePingResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
if result.UserException != nil {
  err = result.UserException
  return 
} else if result.SystemException != nil {
  err = result.SystemException
  return 
} else if result.UnknownException != nil {
  err = result.UnknownException
  return 
}
value = result.GetSuccess()
return
}

// Upload the map to player.
// The map is made of two-dimesional array of integer. The first dimension means row of the map. The second dimension means column of the map.
// 
// For example, if N is the map size, position(0,0) means upper left corner, position(0,N) means the upper right corner.
// In the map array, 0 means empty field, 1 means barrier, 2 means woods, 3 means flag.
// 
// 
// Parameters:
//  - Gamemap
func (p *PlayerServiceClient) UploadMap(ctx context.Context,gamemap [][]int32) (err error) {
if err = p.sendUploadMap(ctx, gamemap); err != nil { return }
return p.recvUploadMap()
}

func (p *PlayerServiceClient) sendUploadMap(ctx context.Context,gamemap [][]int32)(err error) {
oprot := p.OutputProtocol
if oprot == nil {
  oprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.OutputProtocol = oprot
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
    return
}
p.SeqId++
if err = oprot.WriteMessageBegin("uploadMap", thrift.CALL, p.SeqId); err != nil {
  return
}
args := PlayerServiceUploadMapArgs{
Gamemap : gamemap,
}
if err = args.Write(oprot); err != nil {
  return
}
if err = oprot.WriteMessageEnd(); err != nil {
  return
}
return oprot.Flush()
}


func (p *PlayerServiceClient) recvUploadMap() (err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "uploadMap" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "uploadMap failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "uploadMap failed: out of sequence response")
  return
}
if mTypeId == thrift.EXCEPTION {
  error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error5 error
  error5, err = error4.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error5
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "uploadMap failed: invalid message type")
  return
}
result := PlayerServiceUploadMapResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
return
}

// Parameters:
//  - Arguments
func (p *PlayerServiceClient) UploadParamters(ctx context.Context,arguments *Args_) (err error) {
if err = p.sendUploadParamters(ctx, arguments); err != nil { return }
return p.recvUploadParamters()
}

func (p *PlayerServiceClient) sendUploadParamters(ctx context.Context,arguments *Args_)(err error) {
oprot := p.OutputProtocol
if oprot == nil {
  oprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.OutputProtocol = oprot
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
  return
}
p.SeqId++
if err = oprot.WriteMessageBegin("uploadParamters", thrift.CALL, p.SeqId); err != nil {
  return
}
args := PlayerServiceUploadParamtersArgs{
Arguments : arguments,
}
if err = args.Write(oprot); err != nil {
  return
}
if err = oprot.WriteMessageEnd(); err != nil {
  return
}
return oprot.Flush()
}


func (p *PlayerServiceClient) recvUploadParamters() (err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "uploadParamters" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "uploadParamters failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "uploadParamters failed: out of sequence response")
  return
}
if mTypeId == thrift.EXCEPTION {
  error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error7 error
  error7, err = error6.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error7
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "uploadParamters failed: invalid message type")
  return
}
result := PlayerServiceUploadParamtersResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
return
}

// Assign a list of tank id to the player.
// each player may have more than one tank, so the parameter is a list.
// 
// 
// Parameters:
//  - Tanks
func (p *PlayerServiceClient) AssignTanks(ctx context.Context,tanks []int32) (err error) {
if err = p.sendAssignTanks(ctx, tanks); err != nil { return }
return p.recvAssignTanks()
}

func (p *PlayerServiceClient) sendAssignTanks(ctx context.Context,tanks []int32)(err error) {
oprot := p.OutputProtocol
if oprot == nil {
  oprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.OutputProtocol = oprot
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
  return
}
p.SeqId++
if err = oprot.WriteMessageBegin("assignTanks", thrift.CALL, p.SeqId); err != nil {
  return
}
args := PlayerServiceAssignTanksArgs{
Tanks : tanks,
}
if err = args.Write(oprot); err != nil {
  return
}
if err = oprot.WriteMessageEnd(); err != nil {
  return
}
return oprot.Flush()
}


func (p *PlayerServiceClient) recvAssignTanks() (err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "assignTanks" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "assignTanks failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "assignTanks failed: out of sequence response")
  return
}
if mTypeId == thrift.EXCEPTION {
  error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error9 error
  error9, err = error8.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error9
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "assignTanks failed: invalid message type")
  return
}
result := PlayerServiceAssignTanksResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
return
}

// Report latest game state to player.
// 
// 
// Parameters:
//  - State
func (p *PlayerServiceClient) LatestState(ctx context.Context,state *GameState) (err error) {
if err = p.sendLatestState(ctx, state); err != nil { return }
return p.recvLatestState()
}

func (p *PlayerServiceClient) sendLatestState(ctx context.Context,state *GameState)(err error) {
oprot := p.OutputProtocol
if oprot == nil {
  oprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.OutputProtocol = oprot
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
  return
}
p.SeqId++
if err = oprot.WriteMessageBegin("latestState", thrift.CALL, p.SeqId); err != nil {
  return
}
args := PlayerServiceLatestStateArgs{
State : state,
}
if err = args.Write(oprot); err != nil {
  return
}
if err = oprot.WriteMessageEnd(); err != nil {
  return
}
return oprot.Flush()
}


func (p *PlayerServiceClient) recvLatestState() (err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "latestState" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "latestState failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "latestState failed: out of sequence response")
  return
}
if mTypeId == thrift.EXCEPTION {
  error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error11 error
  error11, err = error10.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error11
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "latestState failed: invalid message type")
  return
}
result := PlayerServiceLatestStateResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
return
}

// Ask for the tank orders for this round.
// If this funtion does not return orders within the given round timeout, game engine will make all this player's tank to stick around.
func (p *PlayerServiceClient) GetNewOrders(ctx context.Context) (r []*Order, err error) {
if err = p.sendGetNewOrders(ctx); err != nil { return }
return p.recvGetNewOrders()
}

func (p *PlayerServiceClient) sendGetNewOrders(ctx context.Context)(err error) {
oprot := p.OutputProtocol
if oprot == nil {
  oprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.OutputProtocol = oprot
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
  return
}
p.SeqId++
if err = oprot.WriteMessageBegin("getNewOrders", thrift.CALL, p.SeqId); err != nil {
  return
}
args := PlayerServiceGetNewOrdersArgs{
}
if err = args.Write(oprot); err != nil {
  return
}
if err = oprot.WriteMessageEnd(); err != nil {
  return
}
return oprot.Flush()
}


func (p *PlayerServiceClient) recvGetNewOrders() (value []*Order, err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "getNewOrders" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNewOrders failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNewOrders failed: out of sequence response")
  return
}
if mTypeId == thrift.EXCEPTION {
  error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error13 error
  error13, err = error12.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error13
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNewOrders failed: invalid message type")
  return
}
result := PlayerServiceGetNewOrdersResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
value = result.GetSuccess()
return
}


type CtxTProcessorFunction interface {
  Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (bool, thrift.TException)
}

type PlayerServiceProcessor struct {
  tracker tracker.Tracker
  processorMap map[string]CtxTProcessorFunction
  handler PlayerService
}

func (p *PlayerServiceProcessor) AddToProcessorMap(key string, processor CtxTProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PlayerServiceProcessor) GetProcessorFunction(key string) (processor CtxTProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PlayerServiceProcessor) ProcessorMap() map[string]CtxTProcessorFunction {
  return p.processorMap
}

func NewPlayerServiceProcessor(tracker tracker.Tracker, handler PlayerService) *PlayerServiceProcessor {

  self14 := &PlayerServiceProcessor{tracker:tracker, handler:handler, processorMap:make(map[string]CtxTProcessorFunction)}
  self14.processorMap["ping"] = &playerServiceProcessorPing{handler:handler, tracker:tracker}
  self14.processorMap["uploadMap"] = &playerServiceProcessorUploadMap{handler:handler, tracker:tracker}
  self14.processorMap["uploadParamters"] = &playerServiceProcessorUploadParamters{handler:handler, tracker:tracker}
  self14.processorMap["assignTanks"] = &playerServiceProcessorAssignTanks{handler:handler, tracker:tracker}
  self14.processorMap["latestState"] = &playerServiceProcessorLatestState{handler:handler, tracker:tracker}
  self14.processorMap["getNewOrders"] = &playerServiceProcessorGetNewOrders{handler:handler, tracker:tracker}
return self14
}

func (p *PlayerServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
ctx, err := p.tracker.TryReadRequestHeader(iprot)
if err != nil {
  return
}
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if name == tracker.TrackingAPIName {
    return p.tracker.TryUpgrade(seqId, iprot, oprot)
  }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x15

}

type playerServiceProcessorPing struct {
  tracker tracker.Tracker
  handler PlayerService
}

func (p *playerServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
args := PlayerServicePingArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := PlayerServicePingResult{}
var retval bool
var err2 error
if retval, err2 = p.handler.Ping(ctx); err2 != nil {
switch v := err2.(type) {
  case *PlayerUserException:
result.UserException = v
  case *PlayerSystemException:
result.SystemException = v
  case *PlayerUnknownException:
result.UnknownException = v
  default:
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
  oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
} else {
result.Success = &retval
}
if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}

type playerServiceProcessorUploadMap struct {
  tracker tracker.Tracker
  handler PlayerService
}

func (p *playerServiceProcessorUploadMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
args := PlayerServiceUploadMapArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("uploadMap", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := PlayerServiceUploadMapResult{}
var err2 error
if err2 = p.handler.UploadMap(ctx, args.Gamemap); err2 != nil {
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uploadMap: " + err2.Error())
  oprot.WriteMessageBegin("uploadMap", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
if err2 = oprot.WriteMessageBegin("uploadMap", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}

type playerServiceProcessorUploadParamters struct {
  tracker tracker.Tracker
  handler PlayerService
}

func (p *playerServiceProcessorUploadParamters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
args := PlayerServiceUploadParamtersArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("uploadParamters", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := PlayerServiceUploadParamtersResult{}
var err2 error
if err2 = p.handler.UploadParamters(ctx, args.Arguments); err2 != nil {
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uploadParamters: " + err2.Error())
  oprot.WriteMessageBegin("uploadParamters", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
if err2 = oprot.WriteMessageBegin("uploadParamters", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}

type playerServiceProcessorAssignTanks struct {
  tracker tracker.Tracker
  handler PlayerService
}

func (p *playerServiceProcessorAssignTanks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
args := PlayerServiceAssignTanksArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("assignTanks", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := PlayerServiceAssignTanksResult{}
var err2 error
if err2 = p.handler.AssignTanks(ctx, args.Tanks); err2 != nil {
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assignTanks: " + err2.Error())
  oprot.WriteMessageBegin("assignTanks", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
if err2 = oprot.WriteMessageBegin("assignTanks", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}

type playerServiceProcessorLatestState struct {
  tracker tracker.Tracker
  handler PlayerService
}

func (p *playerServiceProcessorLatestState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
args := PlayerServiceLatestStateArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("latestState", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := PlayerServiceLatestStateResult{}
var err2 error
if err2 = p.handler.LatestState(ctx, args.State); err2 != nil {
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing latestState: " + err2.Error())
  oprot.WriteMessageBegin("latestState", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
if err2 = oprot.WriteMessageBegin("latestState", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}

type playerServiceProcessorGetNewOrders struct {
  tracker tracker.Tracker
  handler PlayerService
}

func (p *playerServiceProcessorGetNewOrders) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
args := PlayerServiceGetNewOrdersArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("getNewOrders", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := PlayerServiceGetNewOrdersResult{}
var retval []*Order
var err2 error
if retval, err2 = p.handler.GetNewOrders(ctx); err2 != nil {
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNewOrders: " + err2.Error())
  oprot.WriteMessageBegin("getNewOrders", thrift.EXCEPTION, seqId)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
} else {
result.Success = retval
}
if err2 = oprot.WriteMessageBegin("getNewOrders", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type PlayerServicePingArgs struct {
}

func NewPlayerServicePingArgs() *PlayerServicePingArgs {
  return &PlayerServicePingArgs{}
}

func (p *PlayerServicePingArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServicePingArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("ping_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type PlayerServicePingResult struct {
Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
UserException *PlayerUserException `thrift:"user_exception,1" db:"user_exception" json:"user_exception,omitempty"`
SystemException *PlayerSystemException `thrift:"system_exception,2" db:"system_exception" json:"system_exception,omitempty"`
UnknownException *PlayerUnknownException `thrift:"unknown_exception,3" db:"unknown_exception" json:"unknown_exception,omitempty"`
}

func NewPlayerServicePingResult() *PlayerServicePingResult {
  return &PlayerServicePingResult{}
}

var PlayerServicePingResult_Success_DEFAULT bool
func (p *PlayerServicePingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return PlayerServicePingResult_Success_DEFAULT
  }
return *p.Success
}
var PlayerServicePingResult_UserException_DEFAULT *PlayerUserException
func (p *PlayerServicePingResult) GetUserException() *PlayerUserException {
  if !p.IsSetUserException() {
    return PlayerServicePingResult_UserException_DEFAULT
  }
return p.UserException
}
var PlayerServicePingResult_SystemException_DEFAULT *PlayerSystemException
func (p *PlayerServicePingResult) GetSystemException() *PlayerSystemException {
  if !p.IsSetSystemException() {
    return PlayerServicePingResult_SystemException_DEFAULT
  }
return p.SystemException
}
var PlayerServicePingResult_UnknownException_DEFAULT *PlayerUnknownException
func (p *PlayerServicePingResult) GetUnknownException() *PlayerUnknownException {
  if !p.IsSetUnknownException() {
    return PlayerServicePingResult_UnknownException_DEFAULT
  }
return p.UnknownException
}
func (p *PlayerServicePingResult) IsSetSuccess() bool {
return p.Success != nil
}

func (p *PlayerServicePingResult) IsSetUserException() bool {
return p.UserException != nil
}

func (p *PlayerServicePingResult) IsSetSystemException() bool {
return p.SystemException != nil
}

func (p *PlayerServicePingResult) IsSetUnknownException() bool {
return p.UnknownException != nil
}

func (p *PlayerServicePingResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 0:
if fieldTypeId == thrift.BOOL {
  if err := p.ReadField0(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
case 1:
if fieldTypeId == thrift.STRUCT {
  if err := p.ReadField1(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
case 2:
if fieldTypeId == thrift.STRUCT {
  if err := p.ReadField2(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
case 3:
if fieldTypeId == thrift.STRUCT {
  if err := p.ReadField3(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
default:
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServicePingResult)  ReadField0(iprot thrift.TProtocol) error {
if v, err := iprot.ReadBool(); err != nil {
return thrift.PrependError("error reading field 0: ", err)
} else {
p.Success = &v
}
  return nil
}

func (p *PlayerServicePingResult)  ReadField1(iprot thrift.TProtocol) error {
p.UserException = &PlayerUserException{}
if err := p.UserException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
}
  return nil
}

func (p *PlayerServicePingResult)  ReadField2(iprot thrift.TProtocol) error {
p.SystemException = &PlayerSystemException{}
if err := p.SystemException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
}
  return nil
}

func (p *PlayerServicePingResult)  ReadField3(iprot thrift.TProtocol) error {
p.UnknownException = &PlayerUnknownException{}
if err := p.UnknownException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
}
  return nil
}

func (p *PlayerServicePingResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("ping_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField0(oprot); err != nil { return err }
if err := p.writeField1(oprot); err != nil { return err }
if err := p.writeField2(oprot); err != nil { return err }
if err := p.writeField3(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
if p.IsSetSuccess() {
if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
if err := oprot.WriteBool(bool(*p.Success)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
}
  return err
}

func (p *PlayerServicePingResult) writeField1(oprot thrift.TProtocol) (err error) {
if p.IsSetUserException() {
if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err) }
if err := p.UserException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err) }
}
  return err
}

func (p *PlayerServicePingResult) writeField2(oprot thrift.TProtocol) (err error) {
if p.IsSetSystemException() {
if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err) }
if err := p.SystemException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err) }
}
  return err
}

func (p *PlayerServicePingResult) writeField3(oprot thrift.TProtocol) (err error) {
if p.IsSetUnknownException() {
if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err) }
if err := p.UnknownException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err) }
}
  return err
}

func (p *PlayerServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServicePingResult(%+v)", *p)
}

// Attributes:
//  - Gamemap
type PlayerServiceUploadMapArgs struct {
Gamemap [][]int32 `thrift:"gamemap,1" db:"gamemap" json:"gamemap"`
}

func NewPlayerServiceUploadMapArgs() *PlayerServiceUploadMapArgs {
  return &PlayerServiceUploadMapArgs{}
}


func (p *PlayerServiceUploadMapArgs) GetGamemap() [][]int32 {
  return p.Gamemap
}
func (p *PlayerServiceUploadMapArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 1:
if fieldTypeId == thrift.LIST {
  if err := p.ReadField1(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
default:
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceUploadMapArgs)  ReadField1(iprot thrift.TProtocol) error {
_, size, err := iprot.ReadListBegin()
if err != nil {
  return thrift.PrependError("error reading list begin: ", err)
}
tSlice := make([][]int32, 0, size)
p.Gamemap =  tSlice
for i := 0; i < size; i ++ {
_, size, err := iprot.ReadListBegin()
if err != nil {
  return thrift.PrependError("error reading list begin: ", err)
}
tSlice := make([]int32, 0, size)
_elem16 :=  tSlice
for i := 0; i < size; i ++ {
var _elem17 int32
if v, err := iprot.ReadI32(); err != nil {
return thrift.PrependError("error reading field 0: ", err)
} else {
_elem17 = v
}
_elem16 = append(_elem16, _elem17)
}
if err := iprot.ReadListEnd(); err != nil {
  return thrift.PrependError("error reading list end: ", err)
}
p.Gamemap = append(p.Gamemap, _elem16)
}
if err := iprot.ReadListEnd(); err != nil {
  return thrift.PrependError("error reading list end: ", err)
}
  return nil
}

func (p *PlayerServiceUploadMapArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("uploadMap_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField1(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceUploadMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
if err := oprot.WriteFieldBegin("gamemap", thrift.LIST, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gamemap: ", p), err) }
if err := oprot.WriteListBegin(thrift.LIST, len(p.Gamemap)); err != nil {
  return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range p.Gamemap {
if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
  return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range v {
if err := oprot.WriteI32(int32(v)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
}
if err := oprot.WriteListEnd(); err != nil {
  return thrift.PrependError("error writing list end: ", err)
}
}
if err := oprot.WriteListEnd(); err != nil {
  return thrift.PrependError("error writing list end: ", err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gamemap: ", p), err) }
  return err
}

func (p *PlayerServiceUploadMapArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceUploadMapArgs(%+v)", *p)
}

type PlayerServiceUploadMapResult struct {
}

func NewPlayerServiceUploadMapResult() *PlayerServiceUploadMapResult {
  return &PlayerServiceUploadMapResult{}
}

func (p *PlayerServiceUploadMapResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceUploadMapResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("uploadMap_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceUploadMapResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceUploadMapResult(%+v)", *p)
}

// Attributes:
//  - Arguments
type PlayerServiceUploadParamtersArgs struct {
Arguments *Args_ `thrift:"arguments,1" db:"arguments" json:"arguments"`
}

func NewPlayerServiceUploadParamtersArgs() *PlayerServiceUploadParamtersArgs {
  return &PlayerServiceUploadParamtersArgs{}
}

var PlayerServiceUploadParamtersArgs_Arguments_DEFAULT *Args_
func (p *PlayerServiceUploadParamtersArgs) GetArguments() *Args_ {
  if !p.IsSetArguments() {
    return PlayerServiceUploadParamtersArgs_Arguments_DEFAULT
  }
return p.Arguments
}
func (p *PlayerServiceUploadParamtersArgs) IsSetArguments() bool {
return p.Arguments != nil
}

func (p *PlayerServiceUploadParamtersArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 1:
if fieldTypeId == thrift.STRUCT {
  if err := p.ReadField1(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
default:
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceUploadParamtersArgs)  ReadField1(iprot thrift.TProtocol) error {
p.Arguments = &Args_{}
if err := p.Arguments.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arguments), err)
}
  return nil
}

func (p *PlayerServiceUploadParamtersArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("uploadParamters_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField1(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceUploadParamtersArgs) writeField1(oprot thrift.TProtocol) (err error) {
if err := oprot.WriteFieldBegin("arguments", thrift.STRUCT, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arguments: ", p), err) }
if err := p.Arguments.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arguments), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arguments: ", p), err) }
  return err
}

func (p *PlayerServiceUploadParamtersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceUploadParamtersArgs(%+v)", *p)
}

type PlayerServiceUploadParamtersResult struct {
}

func NewPlayerServiceUploadParamtersResult() *PlayerServiceUploadParamtersResult {
  return &PlayerServiceUploadParamtersResult{}
}

func (p *PlayerServiceUploadParamtersResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceUploadParamtersResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("uploadParamters_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceUploadParamtersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceUploadParamtersResult(%+v)", *p)
}

// Attributes:
//  - Tanks
type PlayerServiceAssignTanksArgs struct {
Tanks []int32 `thrift:"tanks,1" db:"tanks" json:"tanks"`
}

func NewPlayerServiceAssignTanksArgs() *PlayerServiceAssignTanksArgs {
  return &PlayerServiceAssignTanksArgs{}
}


func (p *PlayerServiceAssignTanksArgs) GetTanks() []int32 {
  return p.Tanks
}
func (p *PlayerServiceAssignTanksArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 1:
if fieldTypeId == thrift.LIST {
  if err := p.ReadField1(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
default:
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceAssignTanksArgs)  ReadField1(iprot thrift.TProtocol) error {
_, size, err := iprot.ReadListBegin()
if err != nil {
  return thrift.PrependError("error reading list begin: ", err)
}
tSlice := make([]int32, 0, size)
p.Tanks =  tSlice
for i := 0; i < size; i ++ {
var _elem18 int32
if v, err := iprot.ReadI32(); err != nil {
return thrift.PrependError("error reading field 0: ", err)
} else {
_elem18 = v
}
p.Tanks = append(p.Tanks, _elem18)
}
if err := iprot.ReadListEnd(); err != nil {
  return thrift.PrependError("error reading list end: ", err)
}
  return nil
}

func (p *PlayerServiceAssignTanksArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("assignTanks_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField1(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceAssignTanksArgs) writeField1(oprot thrift.TProtocol) (err error) {
if err := oprot.WriteFieldBegin("tanks", thrift.LIST, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tanks: ", p), err) }
if err := oprot.WriteListBegin(thrift.I32, len(p.Tanks)); err != nil {
  return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range p.Tanks {
if err := oprot.WriteI32(int32(v)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
}
if err := oprot.WriteListEnd(); err != nil {
  return thrift.PrependError("error writing list end: ", err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tanks: ", p), err) }
  return err
}

func (p *PlayerServiceAssignTanksArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceAssignTanksArgs(%+v)", *p)
}

type PlayerServiceAssignTanksResult struct {
}

func NewPlayerServiceAssignTanksResult() *PlayerServiceAssignTanksResult {
  return &PlayerServiceAssignTanksResult{}
}

func (p *PlayerServiceAssignTanksResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceAssignTanksResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("assignTanks_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceAssignTanksResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceAssignTanksResult(%+v)", *p)
}

// Attributes:
//  - State
type PlayerServiceLatestStateArgs struct {
State *GameState `thrift:"state,1" db:"state" json:"state"`
}

func NewPlayerServiceLatestStateArgs() *PlayerServiceLatestStateArgs {
  return &PlayerServiceLatestStateArgs{}
}

var PlayerServiceLatestStateArgs_State_DEFAULT *GameState
func (p *PlayerServiceLatestStateArgs) GetState() *GameState {
  if !p.IsSetState() {
    return PlayerServiceLatestStateArgs_State_DEFAULT
  }
return p.State
}
func (p *PlayerServiceLatestStateArgs) IsSetState() bool {
return p.State != nil
}

func (p *PlayerServiceLatestStateArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 1:
if fieldTypeId == thrift.STRUCT {
  if err := p.ReadField1(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
default:
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceLatestStateArgs)  ReadField1(iprot thrift.TProtocol) error {
p.State = &GameState{}
if err := p.State.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.State), err)
}
  return nil
}

func (p *PlayerServiceLatestStateArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("latestState_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField1(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceLatestStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
if err := oprot.WriteFieldBegin("state", thrift.STRUCT, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
if err := p.State.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.State), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *PlayerServiceLatestStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceLatestStateArgs(%+v)", *p)
}

type PlayerServiceLatestStateResult struct {
}

func NewPlayerServiceLatestStateResult() *PlayerServiceLatestStateResult {
  return &PlayerServiceLatestStateResult{}
}

func (p *PlayerServiceLatestStateResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceLatestStateResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("latestState_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceLatestStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceLatestStateResult(%+v)", *p)
}

type PlayerServiceGetNewOrdersArgs struct {
}

func NewPlayerServiceGetNewOrdersArgs() *PlayerServiceGetNewOrdersArgs {
  return &PlayerServiceGetNewOrdersArgs{}
}

func (p *PlayerServiceGetNewOrdersArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceGetNewOrdersArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("getNewOrders_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceGetNewOrdersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceGetNewOrdersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PlayerServiceGetNewOrdersResult struct {
Success []*Order `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPlayerServiceGetNewOrdersResult() *PlayerServiceGetNewOrdersResult {
  return &PlayerServiceGetNewOrdersResult{}
}

var PlayerServiceGetNewOrdersResult_Success_DEFAULT []*Order

func (p *PlayerServiceGetNewOrdersResult) GetSuccess() []*Order {
  return p.Success
}
func (p *PlayerServiceGetNewOrdersResult) IsSetSuccess() bool {
return p.Success != nil
}

func (p *PlayerServiceGetNewOrdersResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 0:
if fieldTypeId == thrift.LIST {
  if err := p.ReadField0(iprot); err != nil {
    return err
  }
} else {
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
default:
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *PlayerServiceGetNewOrdersResult)  ReadField0(iprot thrift.TProtocol) error {
_, size, err := iprot.ReadListBegin()
if err != nil {
  return thrift.PrependError("error reading list begin: ", err)
}
tSlice := make([]*Order, 0, size)
p.Success =  tSlice
for i := 0; i < size; i ++ {
_elem19 := &Order{}
if err := _elem19.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
}
p.Success = append(p.Success, _elem19)
}
if err := iprot.ReadListEnd(); err != nil {
  return thrift.PrependError("error reading list end: ", err)
}
  return nil
}

func (p *PlayerServiceGetNewOrdersResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("getNewOrders_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField0(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *PlayerServiceGetNewOrdersResult) writeField0(oprot thrift.TProtocol) (err error) {
if p.IsSetSuccess() {
if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
  return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range p.Success {
if err := v.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
}
}
if err := oprot.WriteListEnd(); err != nil {
  return thrift.PrependError("error writing list end: ", err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
}
  return err
}

func (p *PlayerServiceGetNewOrdersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlayerServiceGetNewOrdersResult(%+v)", *p)
}


